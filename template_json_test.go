package venom

import (
	"encoding/json"
	"fmt"
	"github.com/go-test/deep"
	"github.com/jimschubert/venom/internal"
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestJsonWrite(t *testing.T) {
	type args struct {
		doc     Documentation
		options TemplateOptions
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "writes json doc",
			args: args{
				options: NewOptions().TemplateOptions(),
				doc: Documentation{
					AutoGenerationTag: "generated by: Simple doc json",
					RootCommand: Command{
						Name:  "simple",
						Short: "s",
						Long:  "simple doc json",
						LocalFlags: []Flag{
							{
								Name:        "testing",
								Shorthand:   "t",
								DefValue:    "true",
								NoOptDefVal: "true",
								Hidden:      false,
								RawUsage:    "--testing",
							},
						},
						Runnable: true,
						Subcommands: []Command{
							{
								Name:     "command",
								Short:    "c",
								Long:     "simple doc json subcommand",
								Hidden:   true,
								Runnable: false,
							},
						},
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			outDir := t.TempDir()
			if err := writeJson(outDir, tt.args.doc, tt.args.options); (err != nil) != tt.wantErr {
				t.Fatalf("writeJson() error = %v, wantErr %v", err, tt.wantErr)
			}

			clean := internal.CleanPath(tt.args.doc.RootCommand.Name)
			b, err := os.ReadFile(filepath.Join(outDir, clean, fmt.Sprintf("%s.json", clean)))
			if err != nil {
				t.Fatalf("writeJson() unable to read file at expected path")
			}

			writtenDoc := Documentation{}
			err = json.Unmarshal(b, &writtenDoc)
			if err != nil {
				t.Fatalf("writeJson() unable to unmarshal the generated json")
			}

			if diff := deep.Equal(tt.args.doc, writtenDoc); diff != nil {
				t.Fatalf("writeJson():\n%v", strings.Join(diff, "\t\n"))
			}
		})
	}
}
