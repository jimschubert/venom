package venom

import (
	"fmt"
	"time"

	"github.com/spf13/cobra"
)

type writerFn func(outDir string, doc Documentation, options TemplateOptions) error

var writers = make(map[Formats]writerFn)

// Initialize a new documentation command with cmd as the parent, providing options for customization
// The provided command will always provide documentation from the *root*, which allows the caller to list this automated
// command under other administrative/tooling/hidden commands as needed.
func Initialize(cmd *cobra.Command, options *Options) error {
	if options == nil {
		options = NewOptions()
	}

	if err := options.validate(); err != nil {
		return err
	}

	cmd.AddCommand(&cobra.Command{
		Use:    options.commandName,
		Hidden: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			root := cmd.Root()
			root.InitDefaultHelpCmd()
			root.InitDefaultHelpFlag()

			documentation := Documentation{
				GenerationDate: time.Now().Format("2-Jan-2006"),
				RootCommand:    NewCommandFromCobra(root, options),
			}

			if !cmd.DisableAutoGenTag {
				documentation.AutoGenerationTag = "Auto-generated by jimschubert/venom"
			}

			outDir := options.outDir
			if options.outDir == "" {
				outDir = "."
			}

			if err := Write(outDir, documentation, options); err != nil {
				return err
			}

			return nil
		},
	})

	return nil
}

// registerWriter for a given format to allow writing via the writer function
func registerWriter(format Formats, writer writerFn) {
	writers[format] = writer
}

// Write to outDir the documentation for all given formats
func Write(outDir string, documentation Documentation, options *Options) error {
	var err error
	formats := options.formats
	templateOptions := options.TemplateOptions()
	for _, format := range []Formats{Yaml, Json, Markdown, Man, ReST} {
		if formats.IsSet(format) {
			templateOptions.Logger.Printf("Generating documentation for %v", format)
			if writer, ok := writers[format]; ok {
				err = writer(outDir, documentation, templateOptions)
				if err != nil {
					return err
				}
			} else {
				return fmt.Errorf("missing output writer for format %v", format)
			}
		}
	}
	return nil
}
